use ast::*;
use lexer::TokenType;

use lalrpop_util::ParseError;

grammar<'input>(input: &'input str);

// *** Top level ***

pub File: Vec<Decl<'input>> = {
    // NOTE: Different style than bison grammar
    SOI <(<Decl> ";")*> EOI
};

Decl: Decl<'input> = {
    Func => Decl::Func(<>)
};

// *** Block ***

StmtOrExpr: StmtOrExpr<'input> = {
    Func => StmtOrExpr::Func(<>),
    Expr => StmtOrExpr::Expr(<>),
};

Block: Block<'input> = {
    // NOTE: Different style than bison grammar
    ":" <stmt_or_exprs: (<StmtOrExpr> ";")+> => {
        Block { stmt_or_exprs }
    }
};

// *** Function ***

pub Func: Func<'input> = {
    "func" <name: Ident> "(" <args: FuncArgs?> ")" <body: FuncBody> => {
        let args = args.unwrap_or(vec![]);
        
        Func {
            name,
            args,
            body,
        }
    }
};

pub FuncArgs: Vec<FuncArg<'input>> = {
    <NoValFuncArgs> ","?,
    <DefaultValFuncArgs> ","?,
    <mut args: NoValFuncArgs> "," <args2: DefaultValFuncArgs> ","? => {
        args.extend(args2);
        args
    },
};

NoValFuncArgs: Vec<FuncArg<'input>> = {
    NoValFuncArg => {
        vec![<>]
    },
    <mut args: NoValFuncArgs> "," <arg: NoValFuncArg> => {
        args.push(arg);
        args
    },
};

NoValFuncArg: FuncArg<'input> = {
    <name: Ident> ":" <arg_type: Type> => {
        FuncArg { name, arg_type, default_val: None }
    }
};

DefaultValFuncArgs: Vec<FuncArg<'input>> = {
    DefaultValFuncArg => {
        vec![<>]
    },
    <mut args: DefaultValFuncArgs> "," <arg: DefaultValFuncArg> => {
        args.push(arg);
        args
    },
};

DefaultValFuncArg: FuncArg<'input> = {
    <name: Ident> ":" <arg_type: Type> "=" <default_val: SimpleExpr> => {
        FuncArg { name, arg_type, default_val: Some(default_val) }
    }
};

FuncBody: FuncBody<'input> = {
    <ret_type: ("->" <Type>)?> <block: Block> "end" => {
        FuncBody::Block(ret_type, block)
    },
    "->"? <SimpleExpr> => {
        FuncBody::Expr(<>)
    },
};

// *** Call ***

CallArgs: Vec<CallArg<'input>> = {
    <PosCallArgs> ","?,
    <NamedCallArgs> ","?,
    <mut args: PosCallArgs> "," <args2: NamedCallArgs> ","? => {
        args.extend(args2);
        args
    },
};

PosCallArgs: Vec<CallArg<'input>> = {
    PosCallArg => {
        vec![<>]
    },
    <mut args: PosCallArgs> "," <arg: PosCallArg> => {
        args.push(arg);
        args
    },
};

PosCallArg: CallArg<'input> = {
    SimpleExpr => CallArg { name: None, expr: <> },
};

NamedCallArgs: Vec<CallArg<'input>> = {
    NamedCallArg => {
        vec![<>]
    },
    <mut args: NamedCallArgs> "," <arg: NamedCallArg> => {
        args.push(arg);
        args
    },
};

NamedCallArg: CallArg<'input> = {
    <name: Ident> "=" <expr: SimpleExpr> => CallArg { name: Some(name), expr },
};

// *** If ***

If: If<'input> = {
    "if" <cond: Primary> "then" <if_body: IfBody> => {
        If { cond, then_body: if_body.0, else_body: if_body.1 }
    }
};

IfBody: (Block<'input>, Option<ElseBody<'input>>) = {
    <block: Block> "else" <else_: ElseBody> => {
        (block, Some(else_))
    },
    <Block> "end" => {
        (<>, None)
    }
};

ElseBody: ElseBody<'input> = {
    <Block> "end" => {
        ElseBody::Block(<>)
    },
    // Special case 'else if' to allow chaining (since not a simple expression)
    If => {
        ElseBody::If(Box::new(<>))
    }
};

// *** Identifier ***

Ident: Ident<'input> = {
    <start: @L> IDENT <end: @R> => {
        Ident::from_str(&input[start as usize..end as usize])
    }
};

// *** Literals ***

IntLit: IntLit = {
    <start: @L> NUMBER_LIT <end: @R> =>? {
        input[start as usize..end as usize]
            .parse()
            .map(|value| IntLit { value })
            .map_err(|_| ParseError::User {
                error: "Integer literal is larger than 2^32"
            }
        )
    }
};

BoolLit: BoolLit = {
    "true" => BoolLit(true),
    "false" => BoolLit(false),
};

StringLit: StringLit<'input> = {
    <start: @L> <has_escapes: STRING_LIT> <end: @R> => {
        let s = &input[start as usize..end as usize];
        StringLit::from_str(s, has_escapes)
    }
};

CharLit: CharLit<'input> = {
    <start: @L> <has_escapes: CHAR_LIT> <end: @R> => {
        let s = &input[start as usize..end as usize];
        CharLit::from_str(s, has_escapes)
    }
};

// *** Types ***

Type: Type<'input> = {
    Ident => Type::Simple(<>),
};

// *** Expressions ***

pub Expr: Expr<'input> = {
    If => Expr::If(<>),
    SimpleExpr => Expr::Simple(<>),
};

SimpleExpr: SimpleExpr<'input> = {
    "if" <cond: Primary> "then" <then: Primary> "else" <else_: SimpleExpr> => {
        SimpleExpr::IfThenElse(Box::new(IfThenElse {cond, then, else_}))
    },
    Primary
};

Primary: SimpleExpr<'input> = {
    <target: Primary> "." <field: Ident> => {
        SimpleExpr::Field(Box::new(Field {target, field}))
    },
    <target: Primary> "(" <args: CallArgs?> ")" => {
        let args = args.unwrap_or(vec![]);
        SimpleExpr::Call(Box::new(Call {target, args}))
    },
    Atom
};

Atom: SimpleExpr<'input> = {
    IntLit          => SimpleExpr::IntLit(<>),
    StringLit       => SimpleExpr::StringLit(<>),
    CharLit         => SimpleExpr::CharLit(<>),
    BoolLit         => SimpleExpr::BoolLit(<>),
    Ident           => SimpleExpr::Ident(<>),
    "(" <Expr> ")"  => SimpleExpr::Expr(Box::new(<>)),
};

// *** Terminals ***

extern {
    type Location = u32;
    type Error = &'static str;

    enum TokenType {
        SOI => TokenType::StartOfInput,
        EOI => TokenType::EndOfInput,

        // COMMENT_TOK => TokenType::Comment,

        IDENT => TokenType::Ident,
        NUMBER_LIT => TokenType::NumberLit,
        STRING_LIT => TokenType::StringLit(<bool>),
        CHAR_LIT => TokenType::CharLit(<bool>),

        "(" => TokenType::LeftParen,
        ")" => TokenType::RightParen,
        ";" => TokenType::Semi,
        ":" => TokenType::Colon,
        "=" => TokenType::Assign,
        "." => TokenType::Dot,
        "," => TokenType::Comma,
        "->" => TokenType::RArrow,

        // MULTIPLY_TOK => TokenType::Multiply,
        // DIVIDE_TOK => TokenType::Divide,
        // PLUS_TOK => TokenType::Plus,
        // MINUS_TOK => TokenType::Minus,
        
        "true" => TokenType::True,
        "false" => TokenType::False,

        // "or" => TokenType::Or,
        // "and" => TokenType::And,
        // "not" => TokenType::Not,

        "func" => TokenType::Func,
        "end" => TokenType::End,

        "if" => TokenType::If,
        "then" => TokenType::Then,
        "else" => TokenType::Else,
    }
}